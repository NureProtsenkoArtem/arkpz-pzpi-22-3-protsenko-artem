Харківський національний університет радіоелектроніки
Факультет комп'ютерних наук
Кафедра програмної інженерії




ЗВІТ
до практичного заняття №1 з дисципліни
«Аналіз та рефакторинг коду»
на тему: «Правила оформлення програмного коду»






Виконав
ст. гр. ПЗПІ-22-3
Проценко Артем Романович

Перевірив
ст. викладач кафедри ПІ
Сокорчук Ігор Петрович





Харків 2024
1 МЕТА РОБОТИ

Ознайомитись з основними рекомендаціями щодо написання чистого, ефективного та підтримуваного коду для різних мов програмування, навчити аналізувати та покращувати код для покращення його якості.

2 ВСТУП

F# — це сучасна, функціональна, статично типізована мова програмування, яка вперше з’явилася в 2005 році як частина платформи .NET. Вона була розроблена в Microsoft Research для об'єднання можливостей функціонального програмування з продуктивністю та інтеграцією, що притаманні об'єктно-орієнтованим мовам, таким як C#. F# активно використовується для розробки додатків, де необхідно обробляти великі обсяги даних, забезпечуючи високий рівень паралельності та ефективності коду. Завдяки своїм можливостям і активній спільноті, F# набув популярності в областях фінансових обчислень, обробки даних, наукових досліджень і веб-розробці.
Основні рекомендації для написання коду на F# включають: використання функціональних стилів (immutability та чисті функції), осмислені назви змінних і функцій, мінімізацію використання  даних, що змінюються, організацію коду за допомогою модулів і пайплайн-операторів, а також оптимізацію за допомогою хвостової рекурсії. Крім того, для підвищення надійності коду рекомендується використовувати типи Option і Result для обробки відсутніх значень та помилок. Важливим аспектом є тестування та документування коду для полегшення його підтримки.
Сьогодні F# активно застосовується в різних галузях: від фінансового моделювання (QuantLib, Murex) до веб-розробки (SAFE Stack), машинного навчання та наукових досліджень. Завдяки своїй високій продуктивності та інтеграції з .NET, F# забезпечує розробникам широкий спектр можливостей для створення ефективних, масштабованих і надійних програмних рішень.

3 ХІД РОБОТИ
РЕКОМЕНДАЦІЇ ОФОРМЛЕННЯ КОДУ

Посилання на відео з демонстрацією рекомендацій оформлення коду на мові програмування F# наведено у додатку А.

1.	Не використовуйте табуляції
У F# табуляції можуть викликати проблеми, оскільки компілятор вимагає послідовності у форматуванні. Якщо використовувати табуляції, це може призвести до помилок компіляції та проблем з вирівнюванням коду, які ускладнюють читання і підтримку.
2.  Розбивайте складні вирази на декілька рядків з використанням конвеєрного оператора
 Розбивка складних виразів на декілька рядків та використання конвеєрного оператора підвищує читабельність, дозволяючи чіткіше побачити послідовність обробки даних і розділяти логічні кроки в обчисленнях.
Якщо не розбивати складні вирази на окремі рядки, це призводить до надто довгих рядків, які важко читати та підтримувати. Це може стати причиною помилок, адже складні вирази зливаються і стають непрозорими для розуміння, що робить їх потенційно вразливими до неправильного використання.
3. Використовуйте форматувальник коду Fantomas
Fantomas автоматично форматує код F# відповідно до загальноприйнятих стандартів [1]. Це важливо, оскільки форматування F# може мати значення для компілятора, а також для читабельності коду.
Без автоматичного форматування код може мати непослідовний стиль, що ускладнює його розуміння і підтримку.

Приклад поганого та гарного коду щодо рекомендацій 1–3:

       1: // Поганий приклад
   2: let processData numbers =
   3:   let result = numbers |> List.filter (fun x -> x % 2 = 0) |> List.map (fun x -> x * 2) |> List.sum
   4:   printfn "Result: %d" result
   5:
   6: //Гарний приклад
   7: let processData
   8:     (numbers: int list) =
   9:     numbers
  10:     |> List.filter (fun x -> x % 2 = 0)
  11:     |> List.map (fun x -> x * 2)
  12:     |> List.sum
  13:     |> printfn "Result: %d"

4. Обирайте лаконічні назви для найменування функцій, змінних та модулів.
У F# код часто має функціональний стиль, який заохочує лаконічність і компактність. Лаконічні назви, які чітко відображають призначення змінних та функцій, роблять код легшим для сприйняття.
Якщо назви є надмірно довгими або, навпаки, занадто абстрактними, це створює труднощі в розумінні коду, що ускладнює читання і може призводити до помилок. Погано обрані назви можуть вводити розробників в оману або вимагати додаткових коментарів, щоб пояснити призначення кожного елемента.

5. Дотримуйтесь стандартів найменування
Послідовність у найменуванні відіграє ключову роль у забезпеченні чистоти та читабельності коду. Використання camelCase для функцій та змінних допомагає швидко ідентифікувати їх у коді, тоді як PascalCase для модулів, типів, записів і перерахувань чітко відокремлює ці сутності. Додавання префіксу I до інтерфейсів у PascalCase робить їх легко впізнаваними, що зменшує ризик плутанини.
Ігнорування стандартів найменування призводить до складнощів у читанні і розумінні коду. Випадкове чергування стилів або недостатньо описові назви функцій, змінних і типів можуть змусити розробників витрачати час на з’ясування ролі та значення кожного елемента, що підвищує ймовірність помилок і ускладнює підтримку.

Приклад поганого та гарного коду щодо рекомендацій 5–6:
  15: //Поганий приклад
  16: module dataprocessingmodule
  17:
  18: type customer_record = { customername: string; customerage: int }
  19:
  20: type calculableInterface =
  21:     abstract calcFunc: int -> int
  22:
  23: let Calculate_TotalSum (itemslist: int list) =
  24:     itemslist |> List.sum
  25:
  26: let calculate_customer_age_difference cust1 cust2 =
  27:     abs (cust1.customerage - cust2.customerage)
  28:
  29: //Гарний приклад
  30: module DataProcessing
  31:
  32: type Customer = { Name: string; Age: int }
  33:
  34: type ICalculable =
  35:     abstract Calculate: int -> int
  36:
  37: let calculateTotal items =
  38:     items |> List.sum
  39:
  40: let calculateAgeDifference customer1 customer2 =
  41:     abs (customer1.Age - customer2.Age)

6. Використовуйте коментарі для покращення зрозумілості коду
У F# коментарі забезпечують розуміння логіки складних або нетривіальних частин коду, особливо в місцях, де функціональний стиль може бути менш інтуїтивним для розробників, які звикли до імперативних мов. Однорядкові коментарі (//) зручні для коротких пояснень, тоді як багаторядкові коментарі ((* *)) ідеально підходять для детальних описів складних блоків або умовних конструкцій.
Надлишок коментарів у F# може захаращувати код, особливо якщо коментарі пояснюють очевидні або загальні моменти. З іншого боку, брак коментарів у складних місцях може ускладнити розуміння коду іншими розробниками. Це може призвести до плутанини, неправильного тлумачення логіки, і додаткового часу на з’ясування.

Приклад поганого та гарного коду щодо рекомендації 6
  43: //Поганий приклад
  44: // Функція, яка отримує список чисел і повертає суму списку
  45: let sumList lst =
  46:     lst |> List.sum
  47:
  48: // Функція для обчислення середнього значення списку
  49: let avgList lst =
  50:     let sum = lst |> List.sum // сумуємо список
  51:     let len = List.length lst // рахуємо довжину
  52:     sum / len // повертаємо середнє
  53:
  54: //Гарний приклад
  55: /// Обчислює суму всіх чисел у списку.
  56: /// - parameter lst: Список чисел.
  57: /// - returns: Суму чисел у списку.
  58: let sumList lst =
  59:     lst |> List.sum
  60:
  61: /// Обчислює середнє значення чисел у списку.
  62: /// - parameter lst: Список чисел.
  63: /// - returns: Середнє значення списку. Якщо список порожній, повертає 0.
  64: let avgList lst =
  65:     match lst with
  66:     | [] -> 0
  67:     | _ ->
  68:         let sum = lst |> List.sum
  69:         let len = List.length lst
  70:         sum / len

7. Використовуйте принципи функціональної парадигми
F# є функціональною мовою програмування, тому її основні принципи побудовані на концепціях, таких як чисті функції, та композиція функцій. Ці принципи допомагають створювати надійний і передбачуваний код, де кожна функція може бути протестована окремо, що сприяє гнучкій архітектурі та підтримці.
Ігнорування функціональних принципів у F# може привести до коду, що важко тестувати і підтримувати. Використання змінних зі змінним станом і залежність від глобальних значень роблять код менш передбачуваним, підвищують ризик помилок і ускладнюють налагодження.
8. Для паралельних операцій використовуйте асинхронні робочі процеси
F# забезпечує ефективну підтримку асинхронних операцій, що дозволяє писати продуктивний код, який може одночасно виконувати декілька операцій без блокування основного потоку. Асинхронні робочі процеси дозволяють максимально використовувати ресурси, забезпечуючи виконання паралельних завдань, що є особливо важливим для I/O операцій або затримок у мережі.
Якщо не використовувати асинхронні процеси для паралельних операцій, то код може стати менш ефективним, блокуючи потоки, які очікують завершення повільних операцій.

Приклад поганого та гарного коду щодо рекомендацій 7–8
  72: // Поганий приклад,
  73: let mutable sum = 0
  74: let addToSum x =
  75:     sum <- sum + x
  76:
  77: let result = [1; 2; 3; 4] |> List.map (fun x -> addToSum x)
  78:
  79: let computeData data =
  80:     let result = List.fold (fun acc x -> acc + x) 0 data
  81:     result
  82:
  83: //Гарний приклад
  84: let addToSum x acc = acc + x
  85:
  86: let result = [1; 2; 3; 4] |> List.fold addToSum 0
  87:
  88: let asyncComputeData data =
  89:     async {
  90:         // Створення списку асинхронних обчислень
  91:         let! result = data |> List.map (fun x -> async { return x * 2 }) |> Async.Parallel
  92:         return result |> Array.sum
  93:    }

9. Для обробки помилок використовуйте типи Option та Result
Типи Result та Option в F# є стандартними інструментами для обробки можливих помилок і відсутніх значень. Вони дозволяють явно вказати результат операцій — успішний чи помилковий. Це забезпечує чіткіший код і зменшує потребу в винятках, що спрощує відстеження результатів, особливо у функціональному програмуванні, де важливий передбачуваний і чистий код.
Ігнорування Result і Option на користь звичайних винятків чи пустих значень може призвести до непередбачуваних помилок та ускладнити розуміння коду.
10. Використовуйте конструкцію try..with для обробки винятків
Конструкція try..with в F# дозволяє обробляти винятки та уникати ситуацій, коли програма завершує роботу через непередбачену помилку. Це важливо для забезпечення стабільності та безперервності роботи програми, оскільки дозволяє визначити альтернативні шляхи обробки помилкових ситуацій.
Якщо не використовувати try..with для потенційно помилкових операцій, програма може зупинитися через необроблені винятки. Це знижує надійність та стабільність додатку, особливо в умовах, де непередбачувані помилки можуть порушити роботу користувача.

Приклад поганого та гарного кода щодо рекомендацій 9–10
  95: //Поганий приклад
  96: let sumStrings (inputs: string list) =
  97:     inputs
  98:     |> List.map (fun s -> if s |> System.Int32.TryParse |> fst then int s else 0)
  99:     |> List.sum
 100:
 101: //Гарний приклад
 102: let sumValidStrings (inputs: string list) : Result<int, string> =
 103:     inputs
 104:     |> List.map (fun s ->
 105:         match System.Int32.TryParse s with
 106:         | (true, value) -> Ok value
 107:         | (false, _) -> Error $"'{s}' is not a valid number")
 108:     |> List.fold (fun acc elem ->
 109:         match acc, elem with
 110:         | Ok sum, Ok value -> Ok (sum + value)
 111:         | Error msg, _ -> Error msg
 112:         | _, Error msg -> Error msg) (Ok 0)

11. Використовуйте хвостову рекурсію
Хвостова рекурсія є ефективним підходом до рекурсивних функцій в F#, оскільки вона дозволяє компілятору оптимізувати рекурсивні виклики. Коли функція є хвостово-рекурсивною, F# перетворює її на ітерацію, що дозволяє уникнути нарощування стека викликів, покращує продуктивність і знижує ризик виникнення помилок через переповнення стека.
Якщо функція не є хвостово-рекурсивною, то кожен рекурсивний виклик створює новий кадр у стеку, що призводить до зростання використання пам’яті. Для великих рекурсійних викликів це може призвести до помилок, таких як переповнення стеку, що є проблемою для стабільності і надійності програми.
12. Оптимізація виділення пам’яті
У F# надмірне створення нових об'єктів або значень призводить до збільшення навантаження на систему пам'яті та частого запуску збирача сміття, що може знижувати продуктивність програми. Оптимізація виділення пам’яті допомагає уникнути зайвих об'єктів і зменшує витрати на їхнє керування.
Ігнорування цього принципу призводить до надмірного використання пам'яті, що, своєю чергою, уповільнює роботу програми і може спричинити затримки через часті цикли очищення пам’яті.

Приклад поганого та гарного коду щодо рекомендацій 11-12

 114: //Поганий приклад
 115: let mutable list = []
 116: for i in 1 .. 1000000 do
 117:     list <- list @ [i]
 118: let rec sumList lst =
 119:     match lst with
 120:     | [] -> 0
 121:     | x::xs -> x + sumList xs
 122:
 123: //Гарний приклад
 124: let buildList n =
 125:     let rec loop acc i =
 126:         if i > n then acc
 127:         else loop (i::acc) (i + 1)
 128:     loop [] 1 |> List.rev
 129:
 130: let sumList lst =
 131:     let rec loop acc lst =
 132:         match lst with
 133:         | [] -> acc
 134:         | x::xs -> loop (acc + x) xs
 135:     loop 0 lst

Слайди з презентації, які ілюструють виконання даної практичної роботи наведено у додатку Б.
 
	ВИСНОВКИ

Під час виконання практичного завдання було детально ознайомлено з основними принципами, рекомендаціями та найкращими практиками для написання чистого, ефективного, продуктивного та оптимізованого коду мовою програмування F#. Розглянуто підходи, що допомагають створювати підтримуваний та зрозумілий код, який відповідає принципам функціональної парадигми і дозволяє легко масштабувати рішення, зберігаючи при цьому високу якість та читабельність.
 
СПИСОК ВИКОРИСТАННИХ ДЖЕРЕЛ

1. F# style guide - .NET. Microsoft Learn: Build skills that open doors in your career. URL: https://learn.microsoft.com/en-us/dotnet/fsharp/style-guide/ (дата звернення: 31.10.2024).
 
ДОДАТОК А
Відео-посилання на YouTube

https://www.youtube.com/watch?v=TY4i4N-RVuE
 
ДОДАТОК Б
Рисунки презентації

 
Рисунок Б.1 – Титульний лист

 
Рисунок Б.2 – Порада щодо використання форматувальника коду.

 Рисунок Б.3 – Правила форматування коду

 
Рисунок Б.4 – Приклади поганого і гарного форматування коду 

 
Рисунок Б.5 – Правила найменування

 
Рисунок Б.6 – Порада в обранні назв

 
Рисунок Б.7  – Приклад поганого та гарного найменування

 
Рисунок Б.8 – Порада щодо коментування коду

 
Рисунок Б.9 – Приклад поганого та гарного оформлення коментарів

 
Рисунок Б.10 – Правила дотримання функціональної парадигми

 
Рисунок Б.11 – Поганий та гарний приклад дотримання функціональної парадигми

 
Рисунок Б.12 – Правила обробки помилок

 
Рисунок Б.13 – Приклад поганої та гарної обробки помилок

 
Рисунок Б.14 – Правила оптимізації продуктивності

 
Рисунок Б.15 – Приклад поганої та гарної оптимізації продуктивності

 
Рисунок Б.16 – Висновок щодо наданих рекомендацій

 
Рисунок Б.17 – Список використаних джерел
