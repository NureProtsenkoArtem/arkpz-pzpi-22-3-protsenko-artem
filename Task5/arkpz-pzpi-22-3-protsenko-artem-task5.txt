Харківський національний університет радіоелектроніки
Факультет комп'ютерних наук
Кафедра програмної інженерії




ЗВІТ
до лабораторної роботи №5 з дисципліни
«Аналіз та рефакторинг коду»
на тему: «РОЗГОРТАННЯ ПРОГРАМНОЇ
СИСТЕМИ ТА ДЕМОНСТРАЦІЯ ЇЇ РОБОТИ»






Виконав
ст. гр. ПЗПІ-22-3
Проценко Артем Романович

Перевірив
ст. викладач кафедри ПІ
Сокорчук Ігор Петрович




Харків 2024
1 МЕТА РОБОТИ

Розгорнути програмну систему для автоматизації годування домашніх тварин та продемонструвати її роботу.

2 ХІД РОБОТИ

У ході виконання даної лабораторної работи було зроблено скрипт для розгортання програмної системи для автоматизації годування домашніх тварин. Було зроблено реалізацію встановлення необхідних для запуску залежностей, було реалізовано функції переносу дану з бази даних в конфігурацію проєкту.
Також було розроблено алгоритм для шифрування резервної копії бази даних за допомогою логічної операції «АБО».  Було розроблено функціональність шифрування та розшифрування копії бази даних за ключем.
Код даних функцій наведено в додатку А.
Для перевірки виконання процесу розгортання було зроблено відеодемострацію розгортання, з показом змін конфігурації та коректної роботи серверної частини програмної системи.
Відео з демонстрацією запуску програми наведено у додатку Б.
 
ВИСНОВОК

У результаті виконання лабораторної роботи було успішно розгорнуто програмну систему для автоматизації годування домашніх тварин. Було реалізовано алгоритм шифрування резервних копій бази даних, налаштування необхідних залежностей і перенесення даних у конфігураційні файли проєкту.
 
ДОДАТОК А
Фрагмент коду, з функціями для встановлення необхідних залежностей

   1: import os
   2: import subprocess
   3: import shutil
   4:
   5: # Executes a command in the shell and captures its output and errors
   6: def run_command(command):
   7:     try:
   8:         print(f"Executing command: {' '.join(command)}")
   9:         subprocess.run(command, shell=True, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
  10:         return True
  11:     except FileNotFoundError:
  12:         print(f"FileNotFoundError: Command not found - {' '.join(command)}")
  13:         return False
  14:     except subprocess.CalledProcessError as e:
  15:         print(f"Command failed: {e}")
  16:         return False
  17:
  18: # Adds a directory to the system PATH environment variable
  19: def add_to_path(directory):
  20:     """Adds a directory to the system PATH environment variable."""
  21:     if directory not in os.environ["PATH"]:
  22:         os.environ["PATH"] += os.pathsep + directory
  23:         print(f"Added {directory} to PATH.")
  24:     else:
  25:         print(f"{directory} is already in PATH.")
  26:
  27:
  28: # Checks if Chocolatey is installed, and installs it if missing
  29: def check_and_install_chocolatey():
  30:     """Checks if Chocolatey is installed, and installs it if missing."""
  31:     print("Checking for Chocolatey...")
  32:     if not shutil.which("choco"):
  33:         print("Chocolatey is not installed. Installing...")
  34:         install_command = (
  35:             'powershell -NoProfile -ExecutionPolicy Bypass '
  36:             '-Command "Set-ExecutionPolicy Bypass -Scope Process; '
  37:             '[System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; '
  38:             'iex ((New-Object System.Net.WebClient).DownloadString(\'https://community.chocolatey.org/install.ps1\'))"'
  39:         )
  40:         if run_command(install_command, shell=True):
  41:             print("Chocolatey installed successfully.")
  42:         else:
  43:             print("Failed to install Chocolatey. Please install it manually.")
  44:             return False
  45:     else:
  46:         print("Chocolatey is already installed.")
  47:     return True
  48:
  49: # Checks if PostgreSQL is installed, installs it if missing, and configures a default user
  50: def check_and_install_postgresql():
  51:     """Checks if PostgreSQL is installed, installs it if missing, and configures a default user."""
  52:     print("Checking for PostgreSQL...")
  53:     if not shutil.which("psql"):
  54:         print("PostgreSQL is not installed. Installing...")
  55:         if run_command(["choco", "install", "postgresql", "-y"]):
  56:             print("PostgreSQL installed successfully.")
  57:         else:
  58:             print("Failed to install PostgreSQL. Please install it manually.")
  59:             return
  60:     else:
  61:         print("PostgreSQL is already installed.")
  62:
  63:     default_username = "postgres"
  64:     default_password = "root"
  65:     os.environ['PGPASSWORD'] = default_password
  66:
  67:     create_user_command = f"""
  68:     DO $$
  69:     BEGIN
  70:         IF NOT EXISTS (SELECT 1 FROM pg_roles WHERE rolname = '{default_username}') THEN
  71:             CREATE ROLE {default_username} WITH LOGIN PASSWORD '{default_password}';
  72:         END IF;
  73:     END $$;
  74:     """
  75:
  76:     print(f"Checking if user '{default_username}' exists...")
  77:     if not run_command(["psql", "-U", "postgres", "-c", create_user_command]):
  78:         print(f"Failed to create user '{default_username}'. Ensure you have superuser access.")
  79:     else:
  80:         print(f"User '{default_username}' exists or has been created successfully.")
  81:
  82:     print(f"Granting CREATEDB privilege to user '{default_username}'...")
  83:     grant_privilege_command = f"ALTER ROLE {default_username} CREATEDB;"
  84:     if not run_command(["psql", "-U", "postgres", "-c", grant_privilege_command]):
  85:         print(f"Failed to grant CREATEDB privilege to user '{default_username}'. Ensure you have superuser access.")
  86:     else:
  87:         print(f"CREATEDB privilege granted to user '{default_username}'.")
  88:
  89: # Checks if .NET SDK is installed, installs it if missing, and ensures it is in PATH
  90: def check_and_install_dotnet():
  91:     """Checks if .NET SDK is installed, installs it if missing, and ensures it is in PATH."""
  92:     print("Checking for .NET SDK...")
  93:
  94:     if not run_command(["dotnet","--version"]):
  95:         print(".NET SDK is not installed. Installing...")
  96:
  97:         if run_command(["choco", "install", "dotnet-8.0-sdk", "--version=8.0.404", "-y"]):
  98:             print(".NET SDK installed successfully.")
  99:         else:
 100:             print("Failed to install .NET SDK. Please install it manually.")
 101:             return
 102:     else:
 103:         print(".NET SDK is already installed.")
 104:
 105:     dotnet_path = "C:\\Program Files\\dotnet"
 106:     if os.path.isdir(dotnet_path):
 107:         add_to_path(dotnet_path)
 108:     else:
 109:         print(f"Directory {dotnet_path} does not exist. Ensure .NET SDK is installed correctly.")
 110:
 111: # Checks if Task is installed, installs it if missing, and adds it to PATH
 112: def check_and_install_task():
 113:     if not run_command(["task", "--version"]):
 114:         print("Task command not found, installing...")
 115:         subprocess.run(["choco", "install", "go-task", "-y"], check=True)
 116:         taskfile_path = os.path.join(os.environ.get('TASKPROFILE', ''), 'taskfile', 'bin')
 117:
 118:         if taskfile_path and taskfile_path not in os.environ['PATH']:
 119:             os.environ['PATH'] += os.pathsep + taskfile_path
 120:             print(f"Added {taskfile_path} to PATH.")
 121:             print("Task installed successfully.")
 122:         else:
 123:             print("Failed to install Task using Chocolatey.")
 124:     else:
 125:         print("Task is already installed.")
 126:

Фрагмент коду з функціями запису даних у конфігурацію проєкту

   1: import json
   2:
   3:
   4: #Updates the appsettings.Development.json file with the given database credentials.
   5: def update_appsettings(file_path, db_username, db_password, db_name="pethousedb", host="localhost", port=5432):
   6:     try:
   7:         with open(file_path, "r") as file:
   8:             config = json.load(file)
   9:
  10:         connection_string = (
  11:             f"Host={host};Port={port};Database={db_name};"
  12:             f"Username={db_username};Password={db_password}"
  13:         )
  14:         config["ConnectionStrings"]["PetHouseDbContext"] = connection_string
  15:
  16:         with open(file_path, "w") as file:
  17:             json.dump(config, file, indent=4)
  18:
  19:         print(f"Updated {file_path} successfully.")
  20:     except FileNotFoundError:
  21:         print(f"Configuration file {file_path} not found.")
  22:     except json.JSONDecodeError:
  23:         print(f"Error decoding JSON in {file_path}.")
  24:     except Exception as e:
  25:         print(f"An error occurred while updating {file_path}: {e}")

Фрагмент коду з функціями шифрування та дешифрування резервної копії бази даних

   1: from dotenv import load_dotenv
   2: import os
   3:
   4:
   5: #Encrypts or decrypts data using XOR.
   6: def xor_encrypt_decrypt(data, key):
   7:     return bytes([data[i] ^ key[i % len(key)] for i in range(len(data))])
   8:
   9: #Encrypts the specified file.
  10: def encrypt_file(file_path, key):
  11:     try:
  12:         key_bytes = key.encode()
  13:         with open(file_path, 'rb') as file:
  14:             data = file.read()
  15:         encrypted_data = xor_encrypt_decrypt(data, key_bytes)
  16:         with open(file_path, 'wb') as file:
  17:             file.write(encrypted_data)
  18:         print(f"File {file_path} encrypted successfully.")
  19:     except Exception as e:
  20:         print(f"Error encrypting file {file_path}: {e}")
  21:
  22:
  23: #Decrypts the specified file.
  24:
  25: def decrypt_file(file_path, key):
  26:     try:
  27:         key_bytes = key
  28:         with open(file_path, 'rb') as file:
  29:             encrypted_data = file.read()
  30:         decrypted_data = xor_encrypt_decrypt(encrypted_data, key_bytes)
  31:         with open(file_path, 'wb') as file:
  32:             file.write(decrypted_data)
  33:         print(f"File {file_path} decrypted successfully.")
  34:     except Exception as e:
  35:         print(f"Error decrypting file {file_path}: {e}")
  36:
  37: #Finds the most recent backup file in the specified directory.
  38:
  39: def find_latest_backup(directory, extension=".sql"):
  40:     try:
  41:         files = [f for f in os.listdir(directory) if f.endswith(extension)]
  42:         if not files:
  43:             return None
  44:         files.sort(key=lambda x: os.path.getmtime(os.path.join(directory, x)), reverse=True)
  45:         return os.path.join(directory, files[0])
  46:     except Exception as e:
  47:         print(f"Error while finding backup files: {e}")
  48:         return None
 
ДОДАТОК Б
Посилання на відеозвіт

https://youtu.be/D3ALZaT4JIw
